<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oParEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///生物固有属性初化
///固有属性(只读）
event_inherited();//继承
///创建碰撞区域

CBox = instance_create(x,y,oParCBox)
CBox.mask_index = sprite_index;
CBox.Cid = id;



// States 的模式
IDLE     = '站立';
RUN      = '跑动';
JUMP     = '跳跃';
ROLL     = '滚动';
//状态
state  = IDLE;

xscale = 1;
yscale = 1;
facing = 1;//角色方向
RollTrue  =0//反馈成功翻滚

/***********攻击状态自身变化************************/
attacking = false;//开启攻击
AtkBox = 0;//攻击区域
TowJump = true;//二段跳记录缓冲
AtkTime = 0;//蓄力时间
AtkMode = '';//攻击模式

AtkHit = 0;//攻击次数
AtkHitTime = 0;//刷新攻击段数的时间
AtkList = ds_list_create();


STI  = false;//开启僵硬
INV = false//开启不吸收伤害
//受伤害回复的时长
STITime = 0; //硬直时间
INVTime = 0;//无敌时间
mask_index = sPlayerMask
Parent = object_get_parent(self)
AtkBoxU = 0;
AtkBoxD = 0;
AtkBoxL = 0;
AtkBoxR = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///生物功能初化 也是修改部分
//动作接口初化

kControl = true;

kLeft        = false;
kRight       = false;
kUp          = false;
kDown        = false;

kJump        = false;
kJumpRelease = false;

kAction      = false;
kActionK     = false;
kActionR     = false;

kBlock       = false;

kRollL       = false;
kRollR       = false;



///动作功能属性
var k = 1-0.618
groundAccel = 1.00*k;
groundFric  = 2.00*k;
airAccel    = 0.75*k;
airFric     = 0.01;
vxMax       = 5.25*k;
vyMax       = 13*k;
jumpHeight  = 10*k;
gravNorm    = 0.25;//重力速度
gravSlide   = 0.25; //贴墙重力速度
clingTime   = 2.0;
RollSpeed = 0.5;//滚动速度
RollLong = 4;//滚动距离
TowJumpON = true;//二段跳锁
SlideJumpON = false;//贴墙跳跃
blocking  = false;//开启防御


///绘制体系
//精灵对应表
sIdle = sNoSP; //战立
sRun = sNoSP;//跑动
sRoll = sNoSP; //滚动

sJumpU = sNoSP;//上升
sJumpM = sNoSP;//维持
sJumpD = sNoSP;//下落

sAtk = sNoSP; //攻击;
sDatk = sNoSP;//被攻击


///角色伤害系统属性
maxHP = 1;
maxMP = 0;
maxAP = 0;
HP =  1;
MP =  0;
AP =  0;
//攻击
ATK = 0;//攻击力
ASTI = 0//攻击照成硬直
AFlyH = 0;//击飞玩家
AFlyV = 0;//击飞玩家
//防御
DEF = 0;//防御力
DSTI = 0//僵直补正
DFlyH = 0//吹飞补正
DFlyV = 0//击飞补正

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Roll slash
attacking = false;
state     = IDLE; 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sticking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///结算硬质
//进入硬直
if STITime &gt; 0 {
        STI = true;
        STITime -= 1;
} else {
        STI = false;
        STITime = 0;
}
//进入无敌
if INVTime &gt; 0 and INV = false{
        INV = true;
        INVTime -= 1;
} 
if INVTime = 0 and INV = true {
        INV = false;
        INVTime = 0;
}

//硬直期间
if STI {
        AtkTime = 0;//打断蓄力
        kontrol = false;
} else {
        kontrol = true;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entity Step 2.0

/// EntityStep();

jumped = false;
landed = false;

if (vy &lt; 1 &amp;&amp; vy &gt; -1)
    PlatformCheck();
else
    repeat(abs(vy)) {
        if (!PlatformCheck())
            y += sign(vy);
        else
            break;
    }

if (platformTarget) {
    if (!onGround)
        landed = true;
    
    if (landed)
        with (platformTarget) other.vy = 0;
    else
        with (platformTarget) other.vy = 0;
}

repeat(abs(vx)) {
    if (place_meeting(x + sign(vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(vx), y - 1, oParSolid))
        y -= 1;
         
    if (place_meeting(x + sign(vx), y + 2, oParSolid) &amp;&amp; !place_meeting(x + sign(vx), y + 1, oParSolid))
        y += 1;
      
    // Push block //
    if (place_meeting(x + sign(vx), y, oPushBlock)) {
        // Push slowly
        vx = clamp(vx, -1, 1);
            
        with (instance_place(x + sign(vx), y, oPushBlock)) {
            // UP slope
            if (place_meeting(x + sign(other.vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(other.vx), y - 1, oParSolid))
                --y;
            
            // DOWN slope
            if (!place_meeting(x + sign(other.vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(other.vx), y + 1, oParSolid) &amp;&amp; place_meeting(x + sign(other.vx), y + 2, oParSolid))
                ++y;        

            if (!place_meeting(x + sign(other.vx), y, oParSolid))
                x += sign(other.vx); 
            else {
                other.h = 0;
                break;
            }        
        }
    } // End push block //          
          
    if (!place_meeting(x + sign(vx), y, oParSolid))
        x += sign(vx);
    else
        vx = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var onGroundPrev = onGround;

event_inherited();

if (onGround &amp;&amp; !onGroundPrev) {
    for (var i = 0; i &lt; 4; ++i) {
        instance_create(x + random_range(-8, 8), y  + random_range(-2, 2), oParticle);
    }
    
    xscale = 1.33;
    yscale = 0.67;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///运动处理
//判断陆空
if (onGround) {  
    tempAccel = groundAccel;
    tempFric  = groundFric;
} else {
    tempAccel = airAccel;
    tempFric  = airFric;
}
//复位靠墙壁
// Reset wall cling
if ((!cRight &amp;&amp; !cLeft) || onGround) {
    canStick = true;
    sticking = false;
}   
//贴墙壁的时候
// Cling to wall
if (((kRight &amp;&amp; cLeft) || (kLeft &amp;&amp; cRight)) &amp;&amp; canStick &amp;&amp; !onGround) {
    alarm[0] = clingTime;
    sticking = true; 
    canStick = false;       
}
//处理重力
// Handle gravity
if (!onGround) {
    if ((cLeft || cRight) &amp;&amp; vy &gt;= 0) {
        // Wall slide
        vy = Approach(vy, vyMax, gravSlide); //贴墙减速与否
    } else {
        // Fall normally
        vy = Approach(vy, vyMax, gravNorm);
    }
}

///左右移动
if !(state = RUN )
if kLeft and kRight {kLeft = false ; kRight = false;}//处理左右按下时候漂移的问题

if (state != ROLL) {
//左
// Left 
if (kLeft &amp;&amp; !kRight &amp;&amp; !sticking ) {
    if !attacking
    facing = -1;
    state  = RUN;
    //应用加速向左
    // Apply acceleration left
    if (vx &gt; 0)
        vx = Approach(vx, 0, tempFric);   
    vx = Approach(vx, -vxMax, tempAccel);
    //右
// Right
} else if (kRight &amp;&amp; !kLeft &amp;&amp; !sticking) {
 if !attacking
    facing = 1;
    state  = RUN;
    //应用加速向右
    // Apply acceleration right
    if (vx &lt; 0)
        vx = Approach(vx, 0, tempFric);   
    vx = Approach(vx, vxMax, tempAccel);
}
}
//摩擦
// Friction
if (!kRight &amp;&amp; !kLeft) {
    vx = Approach(vx, 0, tempFric);
    
    if (state != ROLL)
        state = IDLE;
} 

///跳跃部分
// 贴墙跳跃关闭)
if (kJump &amp;&amp; cLeft &amp;&amp; !onGround) and SlideJumpON  {
        yscale = 1.33;
        xscale = 0.67;

        if (kLeft) {
                vy = -jumpHeight * 1.2;
                vx = jumpHeight * .66 * 0.618;
        } else {
                vy = -jumpHeight * 1.1;
                vx = vxMax * 0.618;
        }
}

if (kJump &amp;&amp; cRight &amp;&amp; !onGround) and SlideJumpON {
        yscale = 1.33;
        xscale = 0.67;

        if (kRight) {
                vy = -jumpHeight * 1.2;
                vx = -jumpHeight * .66 * 0.618;
        } else {
                vy = -jumpHeight * 1.1;
                vx = -vxMax * 0.618;
        }
}
//跳跃
// Jump 
if (kJump) {
        //地面起跳
        if oGameSystem.Debug
        {
        
          vy = -jumpHeight;

                                yscale = 1.33;
                                xscale = 0.67;
        }
        else
        {
        if (onGround ) {
                // Fall thru platform
                {
                        if (kDown) {
                                if (place_meeting(x, y + 1, oParJumpThru)) and ! (place_meeting(x, y + 1, oBlock))++y;
                        } else {
                                
                                vy = -jumpHeight;

                                yscale = 1.33;
                                xscale = 0.67;
                               
                        }
                }
        }
        //空中二段跳
         if !(onGround) and TowJump and TowJumpON
        {
        vy = -jumpHeight;
        
                                yscale = 1.33;
                                xscale = 0.67;
        TowJump = false;
        }
        }
        // Variable jumping
} else if (kJumpRelease) {
        if (vy &lt; 0) vy *= 0.25;
}

// Jump state
if (!onGround) state = JUMP;
// Run particles
else if (random(100) &gt; 85 &amp;&amp; abs(vx) &gt; 0.5) instance_create(x, y, oParticle);//粒子特效

//落地刷新二段跳
if (onGround) TowJump = true;
//交换墙滑动过程中面临
// Swap facing during wall slide
if (cRight &amp;&amp; !onGround) and false facing = -1;
else if (cLeft &amp;&amp; !onGround) and false facing = 1;

///滚动部分
// Roll
if (onGround &amp;&amp; !attacking) {
        if (state != ROLL) {
                if (kRollL) {
                        facing = -1;

                        image_index = 0;
                        image_speed = 0.5;
                            RollTrue  = true;
                        sprite_index = sRoll;
 
                        state = ROLL;
                } else if (kRollR) {
                        facing = 1;

                        image_index = 0;
                        image_speed = 0.5;
                        sprite_index = sRoll;
                         RollTrue  = true;
                        state = ROLL;
                       
                }
        }
}
//if  RollTrue  = true
// Roll speed
if (state == ROLL) {
//if kRight and kLeft
     
        image_speed = RollSpeed
        vx = facing *   RollLong// 6 * (1 - 0.618);
        
        // Break out of roll
        if (!onGround || (cLeft || cRight)) {
                state = IDLE;
                if (!attacking) {alarm[1] = -1; }
        }
}

///人物弹性化调整处理
/// Squash + stretch
xscale = Approach(xscale, 1, 0.05);
yscale = Approach(yscale, 1, 0.05);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 选精灵

//else
if (!attacking) {
    switch (state) {
        case IDLE: 
            image_speed = 0.1;
            
            if (blocking)
                sprite_index = sIdle ;
            else
                sprite_index = sIdle;
        break;
        
        case RUN: 
            image_speed = 0.2; 
            
            if (blocking)
                sprite_index = sRun ;
            else
                sprite_index = sRun;
        break;
        
        case JUMP:
            // Mid jump   
            if (!(place_meeting(x, y + 2, oParSolid) &amp;&amp; vy != 0) &amp;&amp; vy &gt;= -1.0 &amp;&amp; vy &lt;= 1.0) {  
                if (blocking)
                    sprite_index = sNoSP//sJumpM ;
               else
                    sprite_index = sJumpM;  
           } else { 
                // Rise + fall
                if (vy &lt;= 0) {
                    if (blocking)
                        sprite_index = sNoSP//sJumpU ;
                    else  
                        sprite_index = sJumpU;  
                } else {
                    if (blocking)
                        sprite_index = sJumpD ;
                    else
                        sprite_index = sJumpD;
                }
            }
             
            // When against a wall   (封印)
            if (cRight || cLeft)and false
                if (blocking)
                    sprite_index = sNoSP//sSlide ;
                else
                   sprite_index = sNoSP//sSlide;  
        break;
        
        case ROLL:
            // Don't do stuff here    
           
        break;
    }
}

    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///关闭控制
if kControl = false scrConOFF();
//if o

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///同步碰撞
CBox.mask_index = sprite_index;
CBox.x = x;
CBox.y = y;

//if STI show_message("?")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//攻击复位
if (sprite_index == sAtk)
{  
    attacking = false;
  ds_list_clear(AtkList)
    }
//滚动复位
if (sprite_index == sRoll) {
    if (!attacking)
        alarm[1] = -1;
            
    state = IDLE;
//if kRight and kLeft
 //{ kRight= 0 kLeft = 0}
// if kLeft and kRight {kLeft = false ; kRight = false;}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///绘制主体

        //draw_self();/// 画精灵
   //绘制无敌效果
   if INV or  state  = ROLL
{var C = c_white}
 else
{var C = c_black}
 
 //判断僵直
    if STI
    {
   draw_sprite_outlined(sBatk, image_index, x, y + (16 - 16 * yscale) * 0.25, facing * xscale, yscale, 0, c_white, c_blue);    
    }
    else
    {
    if (onGround)
    draw_sprite_outlined(sprite_index, image_index, x, y + (16 - 16 * yscale) * 0.25, facing * xscale, yscale, 0, c_white, C);    
else
    draw_sprite_outlined(sprite_index, image_index, x, y, facing * xscale, yscale, 0, c_white, C);
}    
   
    
  

   

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///绘制攻击区域

if (sprite_index == sAtk )
{

     draw_rectangle(AtkBoxL, AtkBoxU, AtkBoxR, AtkBoxD,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
