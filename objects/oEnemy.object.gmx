<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oParEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///角色功能控制
//键位输入初化
kLeft        = false;
kRight       = false;
kUp          = false;
kDown        = false;

kJump        = false;
kJumpRelease = false;

kAction      = false;
kActionK     = false;
kActionR     = false;

kBlock       = false;
kRollL       = false;
kRollR       = false;

//玩家指令输入锁
kControl = true;
//贴墙跳跃
SlideJumpON = false;
//开启防御
blocking  = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///角色属性（一般修改地区）
var k = 1-0.618
groundAccel = 1.00*k;
groundFric  = 2.00*k;
airAccel    = 0.75*k;
airFric     = 0.01;
vxMax       = 5.25*k;
vyMax       = 13*k;
jumpHeight  = 10*k;
gravNorm    = 0.25;//重力速度
gravSlide   = 0.25; //贴墙重力速度
clingTime   = 2.0;
RollSpeed = 0;//滚动速度
RollLong = 4;//滚动距离
TowJumpON = true;//二段跳锁

//修正
BAtkFlyY = 0//击飞修正
BAtkFlyX = 0//击飞修正
Toughness = 0;//硬直修正 

///精灵对应表
sIdle = sNoSP; //战立
sRun = sNoSP;//跑动
sRoll = sNoSP; //滚动

sJumpU = sNoSP;//上升
sJumpM = sNoSP;//维持
sJumpD = sNoSP;//下落

sAtk = sNoSP; //攻击;
sBatk = sNoSP;//被攻击

//受伤害回复的时长
//StiffTime = 0; //硬直时间
//InvalidTime = 0;//无敌时间

//是否绘制debug信息
Debug = true;


MaxHP = 1;
MaxMP = 1;
MaxAP = 1;
HP =  1;
MP =  1;
AP =  1;

ATK = 0;//攻击力
DEF = 0//防御力


/***********防御**********/
DEF = 0;//防御力
DefStiff = 0//僵直补正
DefFlyH = 0//击飞补正
DefFlyV = 0//
DefTime = 0//自身受伤后 无敌时间
/***************攻击****************************/
ATK = 0;//攻击力
AtkStiff = 0//攻击照成硬直
AtkFlyH = 0;//击飞玩家
AtkFlyV = 0;//击飞玩家

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///固有属性(只读）
event_inherited();//继承
///创建碰撞区域
CBbox = instance_create(x,y,oBboxEnemy)
CBbox.mask_index = sprite_index;
CBbox.Pid = id


facing = 1;//方向
// States 的模式
IDLE     = '站立';
RUN      = '跑动';
JUMP     = '跳跃';
ROLL     = '滚动';
//状体
state  = IDLE;

xscale = 1;
yscale = 1;///固定初化

RollTrue  =0//反馈成功翻滚

/***********攻击状态自身变化************************/
attacking = false;//开启攻击
AtkBox = 0;//攻击区域
TowJump = true;//二段跳
AtkTime = 0;//蓄力时间
AtkMode = '';//攻击模式

//Batking = false;//攻击硬直
//BatkTime = 0;//攻击硬直时间

///被攻击体系变量

Stiffing  = false;//开启僵硬
Invaliding = false//开启不吸收伤害
//受伤害回复的时长
StiffTime = 0; //硬直时间
InvalidTime = 0;//无敌时间

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x + 8, y + 8, oCratePoof);

var coins = random_range(4, 8);

for (var i = 0; i &lt; coins; ++i)
    instance_create(x , y - 16, oCoin);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Roll slash
attacking = false;
state     = IDLE; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sticking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entity Step 2.0

/// EntityStep();

jumped = false;
landed = false;

if (vy &lt; 1 &amp;&amp; vy &gt; -1)
    PlatformCheck();
else
    repeat(abs(vy)) {
        if (!PlatformCheck())
            y += sign(vy);
        else
            break;
    }

if (platformTarget) {
    if (!onGround)
        landed = true;
    
    if (landed)
        with (platformTarget) other.vy = 0;
    else
        with (platformTarget) other.vy = 0;
}

repeat(abs(vx)) {
    if (place_meeting(x + sign(vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(vx), y - 1, oParSolid))
        y -= 1;
         
    if (place_meeting(x + sign(vx), y + 2, oParSolid) &amp;&amp; !place_meeting(x + sign(vx), y + 1, oParSolid))
        y += 1;
      
    // Push block //
    if (place_meeting(x + sign(vx), y, oPushBlock)) {
        // Push slowly
        vx = clamp(vx, -1, 1);
            
        with (instance_place(x + sign(vx), y, oPushBlock)) {
            // UP slope
            if (place_meeting(x + sign(other.vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(other.vx), y - 1, oParSolid))
                --y;
            
            // DOWN slope
            if (!place_meeting(x + sign(other.vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(other.vx), y + 1, oParSolid) &amp;&amp; place_meeting(x + sign(other.vx), y + 2, oParSolid))
                ++y;        

            if (!place_meeting(x + sign(other.vx), y, oParSolid))
                x += sign(other.vx); 
            else {
                other.h = 0;
                break;
            }        
        }
    } // End push block //          
          
    if (!place_meeting(x + sign(vx), y, oParSolid))
        x += sign(vx);
    else
        vx = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///碰撞盒
//碰撞盒同步 
CBbox.x = x;
CBbox.y = y;
CBbox.mask_index = sprite_index;
//碰撞盒检测 碰到玩家弹飞

/*if (!Invaliding) and state != ROLL 
{
//呼叫碰撞合检测
        with(CBbox) {           //碰撞合 碰到东西
                                var CE = collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom , oBboxPlayer, 1, 1) //区域检测
                               //读取xxx的数据，草谁。
                               if CE
                                PD(other,CE.Pid)
                            
                             //   var CEA = collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom , oEnemyAtk, 1, 1);
                              //  if CEA
                             //   PD(Pid,CEA)
}}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///被击处理
//Stiffing -= 1; //减少硬直
//Invaliding -= 1; //减少无敌
//Stiffing = max(Stiffing, 0);
//Invaliding = max(Invaliding, 0);
//进入硬直
if StiffTime &gt; 0 {
        Stiffing = true;
        StiffTime -= 1;
} else {
        Stiffing = false;
        StFFTime = 0;
}
//进入无敌
if InvalidTime &gt; 0 {
        Invaliding = true;
        InvalidTime -= 1;
} else {
        Invaliding = false;
        InvalidTime = 0;
}

///硬直期间处理
if Stiffing {
        AtkTime = 0;
        kControl = false;
} else {
        kControl = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///没血就会死
if HP &lt;= 0
{
with(
CBbox
)
{
instance_destroy();

}


instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if HP &lt;= 0
{
//alarm[3] = 1
//instance_activate_object(self)
//instance_deactivate_object(self)
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var onGroundPrev = onGround;

event_inherited();

if (onGround &amp;&amp; !onGroundPrev) {
    for (var i = 0; i &lt; 4; ++i) {
        instance_create(x + random_range(-8, 8), y  + random_range(-2, 2), oParticle);
    }
    
    xscale = 1.33;
    yscale = 0.67;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///运动处理
//判断陆空
if (onGround) {  
    tempAccel = groundAccel;
    tempFric  = groundFric;
} else {
    tempAccel = airAccel;
    tempFric  = airFric;
}
//复位靠墙壁
// Reset wall cling
if ((!cRight &amp;&amp; !cLeft) || onGround) {
    canStick = true;
    sticking = false;
}   
//贴墙壁的时候
// Cling to wall
if (((kRight &amp;&amp; cLeft) || (kLeft &amp;&amp; cRight)) &amp;&amp; canStick &amp;&amp; !onGround) {
    alarm[0] = clingTime;
    sticking = true; 
    canStick = false;       
}
//处理重力
// Handle gravity
if (!onGround) {
    if ((cLeft || cRight) &amp;&amp; vy &gt;= 0) {
        // Wall slide
        vy = Approach(vy, vyMax, gravSlide); //贴墙减速与否
    } else {
        // Fall normally
        vy = Approach(vy, vyMax, gravNorm);
    }
}

///左右移动
if (state != ROLL) {
//左
// Left 
if (kLeft &amp;&amp; !kRight &amp;&amp; !sticking ) {
    if !attacking
    facing = -1;
    state  = RUN;
    //应用加速向左
    // Apply acceleration left
    if (vx &gt; 0)
        vx = Approach(vx, 0, tempFric);   
    vx = Approach(vx, -vxMax, tempAccel);
    //右
// Right
} else if (kRight &amp;&amp; !kLeft &amp;&amp; !sticking) {
 if !attacking
    facing = 1;
    state  = RUN;
    //应用加速向右
    // Apply acceleration right
    if (vx &lt; 0)
        vx = Approach(vx, 0, tempFric);   
    vx = Approach(vx, vxMax, tempAccel);
}
}
//摩擦
// Friction
if (!kRight &amp;&amp; !kLeft) {
    vx = Approach(vx, 0, tempFric);
    
    if (state != ROLL)
        state = IDLE;
} 

///跳跃部分
// 贴墙跳跃关闭)
if (kJump &amp;&amp; cLeft &amp;&amp; !onGround) and false {
        yscale = 1.33;
        xscale = 0.67;

        if (kLeft) {
                vy = -jumpHeight * 1.2;
                vx = jumpHeight * .66 * 0.618;
        } else {
                vy = -jumpHeight * 1.1;
                vx = vxMax * 0.618;
        }
}

if (kJump &amp;&amp; cRight &amp;&amp; !onGround) and false {
        yscale = 1.33;
        xscale = 0.67;

        if (kRight) {
                vy = -jumpHeight * 1.2;
                vx = -jumpHeight * .66 * 0.618;
        } else {
                vy = -jumpHeight * 1.1;
                vx = -vxMax * 0.618;
        }
}
//跳跃
// Jump 
if (kJump) {
        //地面起跳
        if (onGround ) {
                // Fall thru platform
                {
                        if (kDown) {
                                if (place_meeting(x, y + 1, oParJumpThru)) and ! (place_meeting(x, y + 1, oBlock))++y;
                        } else {
                                
                                vy = -jumpHeight;

                                yscale = 1.33;
                                xscale = 0.67;
                               
                        }
                }
        }
        //空中二段跳
         if !(onGround) and TowJump and TowJumpON
        {
        vy = -jumpHeight;
        
                                yscale = 1.33;
                                xscale = 0.67;
        TowJump = false;
        }
        // Variable jumping
} else if (kJumpRelease) {
        if (vy &lt; 0) vy *= 0.25;
}

// Jump state
if (!onGround) state = JUMP;
// Run particles
else if (random(100) &gt; 85 &amp;&amp; abs(vx) &gt; 0.5) instance_create(x, y, oParticle);//粒子特效

//落地刷新二段跳
if (onGround) TowJump = true;
//交换墙滑动过程中面临
// Swap facing during wall slide
if (cRight &amp;&amp; !onGround) and false facing = -1;
else if (cLeft &amp;&amp; !onGround) and false facing = 1;

///滚动部分
// Roll
if (onGround &amp;&amp; !attacking) {
        if (state != ROLL) {
                if (kRollL) {
                        facing = -1;

                        image_index = 0;
                        image_speed = 0.5;
                            RollTrue  = true;
                        sprite_index = sRoll;
 
                        state = ROLL;
                } else if (kRollR) {
                        facing = 1;

                        image_index = 0;
                        image_speed = 0.5;
                        sprite_index = sRoll;
                         RollTrue  = true;
                        state = ROLL;
                       
                }
        }
}
//if  RollTrue  = true
// Roll speed
if (state == ROLL) {
        image_speed = RollSpeed
        vx = facing *   RollLong// 6 * (1 - 0.618);

        // Break out of roll
        if (!onGround || (cLeft || cRight)) {
                state = IDLE;
                if (!attacking) alarm[1] = -1;
        }
}

///人物弹性化调整处理
/// Squash + stretch
xscale = Approach(xscale, 1, 0.05);
yscale = Approach(yscale, 1, 0.05);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///关闭控制
if kControl = false scrConOFF();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//攻击复位
if (sprite_index == sAtk)  
    attacking = false;
//滚动复位
if (sprite_index == sRoll) {
    if (!attacking)
        alarm[1] = -1;
            
    state = IDLE;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///绘制主体
/// 选精灵

//else
if (!attacking) {
    switch (state) {
        case IDLE: 
            image_speed = 0.1;
            
            if (blocking)
                sprite_index = sIdleShield;
            else
                sprite_index = sIdle;
        break;
        
        case RUN: 
            image_speed = 0.2; 
            
            if (blocking)
                sprite_index = sRunShield;
            else
                sprite_index = sRun;
        break;
        
        case JUMP:
            // Mid jump   
            if (!(place_meeting(x, y + 2, oParSolid) &amp;&amp; vy != 0) &amp;&amp; vy &gt;= -1.0 &amp;&amp; vy &lt;= 1.0) {  
                if (blocking)
                    sprite_index = sJumpMShield;
               else
                    sprite_index = sJumpM;  
           } else { 
                // Rise + fall
                if (vy &lt;= 0) {
                    if (blocking)
                        sprite_index = sJumpUShield;
                    else  
                        sprite_index = sJumpU;  
                } else {
                    if (blocking)
                        sprite_index = sJumpDShield;
                    else
                        sprite_index = sJumpD;
                }
            }
             
            // When against a wall   (封印)
            if (cRight || cLeft)and false
                if (blocking)
                    sprite_index = sSlideShield;
                else
                   sprite_index = sSlide;  
        break;
        
        case ROLL:
            // Don't do stuff here    
        break;
    }
}





/// 画精灵
   //绘制无敌效果
   if Invaliding
{ image_alpha =   1/2sin(current_time)}
 else
 image_alpha = 1
 //判断僵直
    if Stiffing
    {
   draw_sprite_miaobian_ext(sBatk, image_index, x, y + (16 - 16 * yscale) * 0.25, facing * xscale, yscale, 0, c_white, image_alpha);    
    }
    else
    {
    if (onGround)
    draw_sprite_miaobian_ext(sprite_index, image_index, x, y + (16 - 16 * yscale) * 0.25, facing * xscale, yscale, 0, c_white, image_alpha);    
else
    draw_sprite_miaobian_ext(sprite_index, image_index, x, y, facing * xscale, yscale, 0, c_white, image_alpha);
}    
   
    
  
   

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///绘制debug信息
if global.Debug{
with(CBbox) {
    draw_set_colour(c_green);
    draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, 1); 
    //draw_sprite(mask_index,1,x,y);
        }
if self.AtkBox
with(self.AtkBox)
{draw_set_colour(c_red);
 draw_rectangle(bboxleft, bboxtop, bboxright, bboxbottom, 1);  

}
    
   draw_text(x,y-32,HP)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
