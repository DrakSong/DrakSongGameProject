<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oParLife</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///属性
//继承
event_inherited();
kControl = true;//指令输入锁


///动作功能属性
var k = 1-0.618
groundAccel = 1.00*k;
groundFric  = 2.00*k;
airAccel    = 0.75*k;
airFric     = 0.01;
vxMax       = 5.25*k;
vyMax       = 13*k;
jumpHeight  = 10*k;
gravNorm    = 0.25;//重力速度
gravSlide   = 0.25; //贴墙重力速度
clingTime   = 2.0;
RollSpeed = 0.5;//滚动速度
RollLong = 4;//滚动距离
TowJumpON = true;//二段跳锁
SlideJumpON = false;//贴墙跳跃
blocking  = false;//开启防御


///绘制体系
sIdle = sPlayerIdle; //战立
sRun = sPlayerRun;//跑动
sRoll = sPlayerRoll; //滚动
sJumpU = sPlayerJumpU;//上升
sJumpM = sPlayerJumpM;//维持
sJumpD = sPlayerJumpD;//下落
sAtk = sPlayerJab; //攻击;
sBatk = sPlayerJumpM;//被攻击


///角色伤害系统属性
MaxHP = 32;
MaxMP = 32;
MaxAP = 32;
HP =  32;
MP =  32;
AP =  32;
//攻击
ATK = 0;//攻击力
ASTI = 0//攻击照成硬直
AFlyH = 0;//击飞玩家
AFlyV = 0;//击飞玩家
//防御
DEF = 0;//防御力
DSTI = 0//僵直补正
DFlyH = 0//吹飞补正
DFlyV = 0//击飞补正

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///数值回复


if  sprite_index != sRoll and !attacking 
{AP+=0.25 }
MP+=0.025*0.7;

AP = min(MaxAP,AP)
MP = min(MaxMP,MP)
HP = min(MaxHP,HP)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///攻击范例
/*
if onGround &amp;&amp; attacking {
    vx = 0
}
if AP - 8 &gt; 0
if (!kBlock &amp;&amp; kAction) and ! attacking and state != ROLL and AtkHit = 0 {
    {

        // Atk in place
        {
            AtkMode = 'S'image_index = 0;
            image_speed = 0.15;
            sprite_index = sAtk;
            attacking = true;
            SoundPaly(SouAtk) AP -= 8;

        }
    }
}

///攻击判定
AtkBox = 0

// Atk
if (sprite_index == sAtk &amp;&amp; round(image_index) &gt; 1) and AtkMode = 'S' {

   AtkBoxL = min(x + (5 * facing), x + (30 * facing));
   AtkBoxR = max(x + (5 * facing), x + (30 * facing));
   AtkBoxU = y-8;
   AtkBoxD = y;

    var C = collision_rectangle_multiple(AtkBoxL, AtkBoxU, AtkBoxR, AtkBoxD, oEnemy, 0, 0);

    if C {

        for (var i = 0; i &lt; ds_list_size(C); i += 1) {
            var T = (ds_list_find_value(C, i)) with(T) {
                vy = -2;
                HP -= 1;
            }

        };
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///键入范例
/*

//关闭控制后全部不可用
if kControl = false scrConOFF();

if kControl{
kLeft        = KeyGet('左',0) 
kRight       = KeyGet('右',0)

kUp          = KeyGet('上',0)    
kDown        = KeyGet('下',0)  

kJump        = KeyGet('B',2)  and !attacking
kJumpRelease = KeyGet('B',1) 

kAction      = KeyGet('A',2)  
kActionK     = KeyGet('A',0)  
kActionR     =KeyGet('A',1) 


kBlock       = false
kRollL       = KeyGet('R',2) and kLeft   and (AP-16)&gt;0//and false
kRollR       = KeyGet('R',2) and kRight   and (AP-16)&gt;0//and false

}
//滚动限制
if RollTrue= true {AP -= 16  RollTrue = false;}

AP = min(MaxAP,AP)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///对话期间不动

if instance_exists(oDialogueBox)
{
kControl = false;

}
else
{
if kControl = false
{
kControl = true
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oCoin">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///左上角的hp mp ap
//////////////////红HP////////////////////////
var Xs = 16+8;//开始
var Xe = 16+MaxHP;//结束
var Y = 8//y
var W = min(100,HP/MaxHP);
var W = max(0,W);
var W = W*(Xe-Xs);//长度
var St = 0;
var Sm = 1;
//绘制开头
draw_sprite_ext(sprUi,St,Xs,Y,1,1,0,c_white,1);
//绘制结尾
draw_sprite_ext(sprUi,St,Xe+1,Y,1,1,0,c_white,1);

//绘制的底层
for (i=0; i&lt;Xe-Xs; i+=1)
{
    draw_sprite_ext(sprUi,Sm,Xs+1+i,Y,1,1,0,c_white,0.43);
};
//绘制现有
for (i=0; i&lt;W; i+=1)
{
    draw_sprite_ext(sprUi,Sm,Xs+1+i,Y,1,1,0,c_white,1);
};




//篮
//////////////////MP////////////////////////
var Xs = 16+8;//开始
var Xe = 16+MaxMP;//结束
var Y = 8+5//y
var W = min(100,MP/MaxMP);
var W = max(0,W);
var W = W*(Xe-Xs);//长度
var St = 2;
var Sm = 3;
//绘制开头
draw_sprite_ext(sprUi,St,Xs,Y,1,1,0,c_white,1);
//绘制结尾
draw_sprite_ext(sprUi,St,Xe+1,Y,1,1,0,c_white,1);

//绘制的底层
for (i=0; i&lt;Xe-Xs; i+=1)
{
    draw_sprite_ext(sprUi,Sm,Xs+1+i,Y,1,1,0,c_white,0.43);
};
//绘制现有
for (i=0; i&lt;W; i+=1)
{
    draw_sprite_ext(sprUi,Sm,Xs+1+i,Y,1,1,0,c_white,1);
};


//绿
//
////////////////////Ap/////////////////////
var Xs = 16+8;//开始
var Xe = 16+MaxAP;//结束
var Y = 8+5+5//y
var W = min(100,AP/MaxAP);
var W = max(0,W);
var W = W*(Xe-Xs);//长度
var St = 4;
var Sm = 5;
//绘制开头
draw_sprite_ext(sprUi,St,Xs,Y,1,1,0,c_white,1);
//绘制结尾
draw_sprite_ext(sprUi,St,Xe+1,Y,1,1,0,c_white,1);

//绘制的底层
for (i=0; i&lt;Xe-Xs; i+=1)
{
    draw_sprite_ext(sprUi,Sm,Xs+1+i,Y,1,1,0,c_white,0.43);
};
//绘制现有
for (i=0; i&lt;W; i+=1)
{
    draw_sprite_ext(sprUi,Sm,Xs+1+i,Y,1,1,0,c_white,1);
};

draw_sprite_ext(sprUi,9,16-8,8-1,1,1,0,c_white,1);

//左空位


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
