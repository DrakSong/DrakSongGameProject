<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGame</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rm     = -1;
rmPrev = -1;

// Camera /////////////////////////////////////////////////////////////////////

// Camera state
shake     = false;
babyshake = false;
xshake    = choose(-1, 1);
yshake    = choose(-1, 1);
shakeDist = 2;

// Camera offset
xcamo = 0;
ycamo = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lx = 0;
ly = 0;

clickInit = mouse_check_button_pressed(mb_left)
clicked   = mouse_check_button(mb_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Turn off screenshake

shake     = false;
babyshake = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera

// Make sure camera is inside room
view_xview[0] = max(0, min(view_xview[0], room_width  - view_wport[0]));
view_yview[0] = max(0, min(view_yview[0], room_height - view_hport[0]));      

// Adjust for screenshake
view_xview[0] += xcamo;
view_yview[0] += ycamo;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Screenshake

var r;

r = 0;

// Screenshake
if (shake) {
    r = choose(-1, 1);
    
    if (r) {
        xcamo = xshake * shakeDist;
        ycamo = 0;
        xshake *= -1;
    } else {
        xcamo = 0;
        ycamo = yshake * shakeDist;    
        yshake *= -1;
    }
// Small screenshake
} else if (babyshake) {
    r = choose(-1, 1);
    
    if (r) {
        xcamo = xshake * shakeDist * 0.5;
        ycamo = 0;
        xshake *= -1;
    } else {
        xcamo = 0;
        ycamo = yshake * shakeDist * 0.5;    
        yshake *= -1;
    }
} else {
    xcamo = 0;
    ycamo = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug

// Input variables for debug room traversal
var kRestart, kExit, kPrev, kNext;

kRestart = keyboard_check_pressed(ord('R'))    || gamepad_button_check_pressed(0, gp_select);
kExit    = keyboard_check_pressed(vk_escape);
kPrev    = keyboard_check_pressed(vk_subtract) || gamepad_button_check_pressed(0, gp_shoulderlb);
kNext    = keyboard_check_pressed(vk_add)      || gamepad_button_check_pressed(0, gp_shoulderrb);

if (kRestart)
    room_restart();
if (kExit)
    game_end();
    
// Iterate through rooms backward
if (kPrev) {
    if (room == room_first)
        room_goto(room_last);
    else
        room_goto_previous();
}

// Iterate through rooms forwards
if (kNext) {
    if (room == room_last)
        room_goto(room_first);
    else
        room_goto_next();
}

/// Debug for path based platform
if (mouse_check_button_pressed(mb_left)) {
    if (instance_exists(oPathMover)) {
        with (oPathMover) {
            plen = path_get_length(path);
            path_add_point(path, mouse_x - xstart, mouse_y - ystart, pSpd);
            plennew = path_get_length(path);
            
            pPos = pPos * (plen / plennew);
        }
    }
} 

if (mouse_check_button(mb_left)) {
    if (instance_exists(oPathMover)) {
        with (oPathMover) {
            plen = path_get_length(path);
            path_delete_point(path, path_get_number(path) - 1);
            plennew = path_get_length(path);
            pPos = pPos * (plen / plennew);
                        
            plen = path_get_length(path);
            path_add_point(path, mouse_x - xstart, mouse_y - ystart, pSpd);
            plennew = path_get_length(path);
            pPos = pPos * (plen / plennew);
            
            pMov = false;
        }
    }
} else {
    with (oPathMover)
        pMov = true;
}

with (oPathMover) {
    pSpd += (mouse_wheel_up() - mouse_wheel_down()) * 2;
    pSpd  = clamp(pSpd, 1, 16);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
clickInit = mouse_check_button_pressed(mb_left)
clicked   = mouse_check_button(mb_left);

// INITIAL POINT
if (clickInit) {
    var dirToMouse = point_direction(oPlayer.x, oPlayer.y - 8, mouse_x, mouse_y);
    
    // Distance to contact point
    var i = 0;
    
    do {
        i++    
    } until (collision_line(oPlayer.x, oPlayer.y - 8, oPlayer.x + lengthdir_x(i, dirToMouse), (oPlayer.y - 8) + lengthdir_y(i, dirToMouse), oParSolid, false, true)); 
    
    lx = oPlayer.x + lengthdir_x(i, dirToMouse);
    ly = (oPlayer.y - 8) + lengthdir_y(i, dirToMouse);
// SECONDARY POINT(S)
}// else if (clicked) {
    var dirToMouse = point_direction(oPlayer.x, oPlayer.y - 8, mouse_x, mouse_y);
    
    // Distance to contact point
    var i = 0;
    
    do {
        i++    
    } until (collision_line(oPlayer.x, oPlayer.y - 8, oPlayer.x + lengthdir_x(i, dirToMouse), (oPlayer.y - 8) + lengthdir_y(i, dirToMouse), oParSolid, false, true)); 
    
    lx = oPlayer.x + lengthdir_x(i, dirToMouse);
    ly = (oPlayer.y - 8) + lengthdir_y(i, dirToMouse);
//}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rmPrev = rm;
rm     = room;

xcamo = 0;
ycamo = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_circle(lx, ly, 8, true);

//if (clicked)
    //draw_line(oPlayer.x, oPlayer.y - 8, lx, ly);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
