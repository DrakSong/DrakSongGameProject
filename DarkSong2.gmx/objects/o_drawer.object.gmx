<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>code_create=''
code_graph=''
code_draw=''
code_change=0
code_index=0

list=ds_list_create()
surf=surface_create(400,200)

width=600
height=400

width_port=400
height_port=200

X=0
Y=0

Xstart=50
Ystart=50

mouse_move=0
mouse_target=0

scale=1

i=0
i_pre=1000

lang_init()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scale*=2
i=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scale*=0.5
i=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(f_norm)
if mouse_check_button_pressed(mb_any)
{
    Xstart=mouse_x
    Ystart=mouse_y
    
    Xdeff=mouse_x-X
    Ydeff=mouse_y-Y
    
    wp=width
    hp=height
    
    xx=room_width*0.5-wp*0.5
    yy=room_height*0.5-hp*0.5
    
    if point_in_rectangle(mouse_x,mouse_y,xx+5,yy+5,xx+width_port-5,yy+height_port-5)
    {
        mouse_move=1
        mouse_target=1
    }
    else if point_in_rectangle(mouse_x,mouse_y,xx-5,yy-5,xx+width_port+5,yy+height_port+5)
    {
        if mouse_x&lt;xx+5
        {
            mouse_move=1
            mouse_target=2
        }
        else if mouse_x&gt;xx+width_port-5
        {
            mouse_move=1
            mouse_target=3
        }
        else if mouse_y&lt;yy+5
        {
            mouse_move=1
            mouse_target=4
        }
        else if mouse_y&gt;yy+height_port-5
        {
            mouse_move=1
            mouse_target=5
        }
    }
}


if mouse_check_button(mb_any)
{
    if mouse_move
    if mouse_target=1
    {
        X+=Xstart-mouse_x
        Y+=Ystart-mouse_y
        if Xstart!=mouse_x or Ystart!=mouse_y i=0
    }
    else if mouse_target=2
    {
        width_port=(room_width/2-mouse_x)*2
    }
    else if mouse_target=3
    {
        width_port=(mouse_x-room_width/2)*2
    }
    else if mouse_target=4
    {
        height_port=(room_height/2-mouse_y)*2
    }
    else if mouse_target=5
    {
        height_port=(mouse_y-room_height/2)*2
    }
}
else
{
    mouse_target=0
    mouse_move=0
}
Xstart=mouse_x
Ystart=mouse_y

width_port=max(width_port,50)
height_port=max(height_port,50)
width=max(round(width_port),50)
height=max(round(height_port),50)

if !surface_exists(surf)
{
    surf=surface_create(width,height)
    if i!=1000 i=0
}
if surface_get_width(surf)!=width or surface_get_height(surf)!=height
{
    surface_resize(surf,width,height)
    if i!=1000 i=0
}

surface_set_target(surf)

if i=0
{
    draw_clear_alpha(c_white,1)
    global.var_map[? 'color']=c_black
    
    draw_set_colour(merge_colour(c_green,c_black,0.7))
    
    draw_line(width*0.5-X,0,width*0.5-X,height)
    draw_line(0,height*0.5-Y,width,height*0.5-Y)
    
    draw=lang_read(code_draw)
    trash_add(draw,ds_type_list)
    draw=lang_to_PRN(draw)
    trash_add(draw,ds_type_queue)
    
    l=lang_read(code_graph)
    trash_add(l,ds_type_list)
    l=lang_to_PRN(l)
    trash_add(l,ds_type_queue)
    
    ds_list_clear(list)
}

time=current_time

i_pre=i
while(time+25&gt;current_time and i&lt;=width)
{
    global.var_map[? 'x']=i*scale-round(width*0.5)*scale+X*scale
    global.var_map[? 'y']=round(height*0.5)
    
    output=lang_PRN_exe(l)
    if string(output)!='@ERROR@'
    {
        list[| i]=global.var_map[? 'y']/scale+round(height*0.5)
    }
    else
    {
        list[| i]='@ERROR@'
    }
    
    lang_PRN_exe(draw)
    color[i]=global.var_map[? 'color']
    show_debug_message(color[i])
    
    i++
    
    for(j=0;j&lt;width/2;j++)
    {
        
    }
}

draw_set_colour(merge_colour(c_red,c_black,0.3))
for(j=i_pre;j&lt;i-1;j++)
{
    draw_set_color(color[j])
    if string(list[| j+1])!='@ERROR@' and string(list[| j])!='@ERROR@' draw_line(j, height-list[| j]-Y, j+1, height-list[| j+1]-Y)
}



if i&gt;=width trash_clear()

surface_reset_target()

if keyboard_check_pressed(vk_enter)
{
    i=0
}

draw_set_colour(c_black)
draw_surface_ext(surf,room_width*0.5-width*0.5,room_height*0.5-height*0.5,width_port/width,height_port/height,0,c_white,1)
draw_rectangle(room_width*0.5-width*0.5,room_height*0.5-height*0.5,room_width*0.5-width*0.5+width_port,room_height*0.5-height*0.5+height_port,1)

draw_set_colour(merge_colour(c_green,c_black,0.9))

text_graph=code_graph
text_draw=code_draw

if code_change
{
    if code_index=0
    {
        code_graph=keyboard_string
        text_graph=code_graph
        if current_time mod 800 &lt; 400 {text_graph+='|'}
    }
    else
    if code_index=1
    {
        code_draw=keyboard_string
        text_draw=code_draw
        if current_time mod 800 &lt; 400 {text_draw+='|'}
    }
}

draw_text(12,10,text_graph)
draw_text(12,40,text_draw)

draw_rectangle(10,10,room_width-10,38,1)
draw_rectangle(10,40,room_width-10,68,1)

if mouse_check_button_pressed(mb_left)
{
    if point_in_rectangle(mouse_x,mouse_y,10,10,room_width-10,35)
    {
        code_change=1
        code_index=0
        keyboard_string=code_graph
    }
    else
    if point_in_rectangle(mouse_x,mouse_y,10,40,room_width-10,65)
    {
        code_change=1
        code_index=1
        keyboard_string=code_draw
    }
}

xx=round(mouse_x-room_width*0.5)
draw_text(10,100,'x: '+string(xx*scale))

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
