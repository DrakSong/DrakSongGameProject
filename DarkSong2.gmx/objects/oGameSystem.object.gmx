<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///修改游戏标题
window_set_caption("DarkSong");/*+
"RAM "+string(ram_application()/1024/1024)+" MB"+" / "+
"CPU : "+string(cpu_usage())+"%");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///第一次打开游戏
global. GameInfo = json_decode(GameInfoString()
)
//载入初步的键盘信息；
var V=global.GameInfo[?'设置'];
var K = V[?'键盘信息'];

 K[?'上'] = vk_up;
 K[?'下'] = vk_down;
 K[?'左'] = vk_left;
 K[?'右'] = vk_right;
 K[?'A'] = ord('X');
 K[?'B'] = ord('Z');
 K[?'L'] = ord('A');
 K[?'R'] = ord('C');
 K[?'P'] = ord('P');







</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///默认不修改部分
//游戏设置部分
gml_release_mode(false);//跳过错误
display_set_windows_alternate_sync(true);//垂直同步
display_set_windows_vertex_buffer_method(vbm_compatible);//几何顶点的缓冲抹杀
texture_set_blending(true);//使用混色和透明变化
texture_set_interpolation(false);//插值开启关闭
show_debug_overlay(true);
Debug = true;

//绘制画面部分
GuiSet(1);//调整gui比例
WinSet(2);//调整窗口比例;
ViewSet(0,true,1,oPlayer);//调整视野
PauseBG = 0//surface_create(512,256);
FontAdd();

//音乐部分
MKFICreate();//创建获取麦克风音量器

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///获取键盘信息

var V = global.GameInfo[?"实时变量"];
V = V[?'键盘信息'];

var K = V[?'按住'];
var KR = V[?'松开'];
var KP = V[?'按下'];

var GV = global.GameInfo[?'设置'];GV = GV[?'键盘信息'];

var Key;
 
Key[0] =  '上';
Key[1] =  '下';
Key[2] =  '左';
Key[3] =  '右';
Key[4] =  'A';
Key[5] =  'B';
Key[6] =  'L';
Key[7] =  'R';
Key[8] =  'P';



var i;
i = 0;
{
K[?Key[i]] = keyboard_check(GV[?Key[i]]);
KR[?Key[i]] = keyboard_check_released(GV[?Key[i]])
KP[?Key[i]] = keyboard_check_pressed(GV[?Key[i]])
};
i = 1;
{
K[?Key[i]] = keyboard_check(GV[?Key[i]]);
KR[?Key[i]] = keyboard_check_released(GV[?Key[i]])
KP[?Key[i]] = keyboard_check_pressed(GV[?Key[i]])
};

i = 2;
{
K[?Key[i]] = keyboard_check(GV[?Key[i]]);
KR[?Key[i]] = keyboard_check_released(GV[?Key[i]])
KP[?Key[i]] = keyboard_check_pressed(GV[?Key[i]])
};

i = 3;
{
K[?Key[i]] = keyboard_check(GV[?Key[i]]);
KR[?Key[i]] = keyboard_check_released(GV[?Key[i]])
KP[?Key[i]] = keyboard_check_pressed(GV[?Key[i]])
};

i = 4;
{
K[?Key[i]] = keyboard_check(GV[?Key[i]]);
KR[?Key[i]] = keyboard_check_released(GV[?Key[i]])
KP[?Key[i]] = keyboard_check_pressed(GV[?Key[i]])
};

i = 5;
{
K[?Key[i]] = keyboard_check(GV[?Key[i]]);
KR[?Key[i]] = keyboard_check_released(GV[?Key[i]])
KP[?Key[i]] = keyboard_check_pressed(GV[?Key[i]])
};

i = 6;
{
K[?Key[i]] = keyboard_check(GV[?Key[i]]);
KR[?Key[i]] = keyboard_check_released(GV[?Key[i]])
KP[?Key[i]] = keyboard_check_pressed(GV[?Key[i]])
};

i = 7;
{
K[?Key[i]] = keyboard_check(GV[?Key[i]]);
KR[?Key[i]] = keyboard_check_released(GV[?Key[i]])
KP[?Key[i]] = keyboard_check_pressed(GV[?Key[i]])
};

i = 8;
{
K[?Key[i]] = keyboard_check(GV[?Key[i]]);
KR[?Key[i]] = keyboard_check_released(GV[?Key[i]])
KP[?Key[i]] = keyboard_check_pressed(GV[?Key[i]])
};


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///暂停处理
var G = global.GameInfo[?"实时变量"];

var V= G[?'键盘信息'];
var K = V[?'按住'];
var KR = V[?'松开'];
var KP = V[?'按下'];
var Ping = 0

//var BGM = global.GameInfo[?"实时变量"];
//var BGM = BGM[?'BGMIndex']

//键盘判定
if (KP[?'P'] == true) {
G[?'暂停'] ^=true;
}
                
 //暂停 
if (PauseGet() = true) and  KeyGet('P',2)== true{
              
   // surface_save(application_surface, "test.png");
    
                audio_pause_all();
                instance_create(x,y,oPause);
                //surface_save(application_surface, "test.png");
        
        }
//恢复
if (PauseGet() = false) and  KeyGet('P',2) == true{
               
                audio_resume_all();
                
        
        }
        
        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///摄像鸡
//room_speed = 99999
ViewSet(0,1,1,oPlayer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///获取麦克风音量
MKFAudioRecording();
//返回到游戏信息
var V =global.GameInfo[?'实时变量'];
V[?'麦克风音量'] = microphone_volume;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>BGMFree();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug信息
if Debug{
draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_set_font(fWindow)
texture_set_interpolation(true);
draw_set_colour(c_fuchsia)
display_set_gui_size(window_get_width(),window_get_height())
draw_text(20,20,"RAM installed: "+string(ram_installed()/1024/1024)+" MB");
draw_text(20,40,"RAM used: "+string(ram_used()/1024/1024)+" MB");
draw_text(20,60,"RAM available: "+string(ram_available()/1024/1024)+" MB");
draw_text(20,80,"RAM used by this application: "+string(ram_application()/1024/1024)+" MB");
draw_text(20,100,"CPU Usage: "+string(cpu_usage())+"%");
draw_text(20,120,"MKF volume"+string(microphone_volume/250)+'%');
draw_text(20,140,'FPS :'+string(fps));
draw_text(20,160,'FPS_REAL :'+string(fps_real));
draw_text_outline(20,180,'draw text outline',2,c_fuchsia,12)
draw_text_button(20,200,'draw text button ',2,c_white,c_fuchsia)
texture_set_interpolation(false);




GuiSet(1);
}
//show_debug_overlay(Debug);
if keyboard_check_pressed(ord('T')) Debug^=true;


if PauseGet(){ draw_rectangle(0,0,512,288,0)

//draw_background('text.png',0,0,)


}

texture_set_interpolation(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
